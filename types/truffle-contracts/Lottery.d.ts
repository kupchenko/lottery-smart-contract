/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface LotteryContract extends Truffle.Contract<LotteryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LotteryInstance>;
}

export interface WinnerPicked {
  name: "WinnerPicked";
  args: {
    index: BN;
    prize: BN;
    winner: string;
    nickname: string;
    0: BN;
    1: BN;
    2: string;
    3: string;
  };
}

type AllEvents = WinnerPicked;

export interface LotteryInstance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  participants(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: BN }>;

  pickWinner: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Gets the list of participants currently in the game
   */
  getParticipants(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ nickname: string; wallet: string; amount: BN }[]>;

  /**
   * Will be called by the player who enters de game sending ether and makes sure he/she is sending a minimum of 0.01 ether
   */
  enter: {
    (nickname: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      nickname: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      nickname: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      nickname: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    participants(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: BN }>;

    pickWinner: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Gets the list of participants currently in the game
     */
    getParticipants(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ nickname: string; wallet: string; amount: BN }[]>;

    /**
     * Will be called by the player who enters de game sending ether and makes sure he/she is sending a minimum of 0.01 ether
     */
    enter: {
      (nickname: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        nickname: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        nickname: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        nickname: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
